apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'com.yanzhenjie.andserver'
android {
    compileSdkVersion versions.compile
    buildToolsVersion versions.buildTool

    defaultConfig {
        applicationId "com.stardust.auojs.inrt"
        minSdkVersion versions.mini
        targetSdkVersion versions.target
        versionCode versions.appVersionCode - 200
        versionName versions.appVersionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
    }
    lintOptions {
        abortOnError false
        disable 'MissingTranslation'
        disable 'ExtraTranslation'
        abortOnError false
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    splits {

        abi {
            enable true
            reset()
            include "x86", "armeabi-v7a"
            universalApk false
        }
    }
    buildTypes {
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

def buildApkPluginForAbi(File pluginProjectDir, String abi) {
    copy {
        from file('..\\app\\release\\')
        into new File(pluginProjectDir, 'app\\src\\main\\assets')
        def fileName = "inrt-" + abi + "-release.apk"
        include fileName
        rename fileName, 'template.apk'
    }
    exec {
        workingDir pluginProjectDir
        commandLine 'gradlew.bat', 'assembleRelease'
    }
    copy {
        from new File(pluginProjectDir, 'app\\build\\outputs\\apk\\release')
        into file('..\\common\\release')
        def fileName = '打包插件-' + versions.appVersionName + '-release.apk'
        include fileName
        rename fileName, '打包插件-' + abi + '-' + versions.appVersionName + '-release.apk'
    }
}

task buildApkPlugin {
    doLast {
        def pluginProjectDirPath = '..\\..\\AutoJsApkBuilderPlugin'
        def pluginProjectDir = file(pluginProjectDirPath)
        if (!pluginProjectDir.exists() || !pluginProjectDir.isDirectory()) {
            println 'pluginProjectDir not exists'
            return
        }
        buildApkPluginForAbi(pluginProjectDir, 'armeabi-v7a')
        buildApkPluginForAbi(pluginProjectDir, 'x86')
    }
}

tasks.whenTaskAdded { task ->
    if (task.name == 'assembleRelease') {
        task.finalizedBy 'buildApkPlugin'
    }
}

repositories {
    flatDir {
        dirs 'libs'
    }
    google()
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    //Glide
    implementation('com.github.bumptech.glide:glide:4.2.0', {
        exclude group: 'com.android.support'
    })
    implementation project(':automator')
    implementation project(':common')
    implementation project(':autojs')
    implementation 'com.yanzhenjie.andserver:api:2.1.11'
    annotationProcessor 'com.yanzhenjie.andserver:processor:2.1.11'

    implementation 'com.github.princekin-f:EasyFloat:1.3.4'
}
